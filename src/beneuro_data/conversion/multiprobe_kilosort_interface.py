import warnings
from pathlib import Path
from typing import Optional

import numpy as np
from neuroconv.datainterfaces import KiloSortSortingInterface
from neuroconv.utils import DeepDict, FolderPathType
from pynwb import NWBFile
import probeinterface as pi






class MultiProbeKiloSortInterface(KiloSortSortingInterface):
    def __init__(
        self,
        processed_recording_path: str,
        keep_good_only: bool = False,
        verbose: bool = True,
    ):
        kilosort_folder_paths = list(
            Path(processed_recording_path).glob("**/sorter_output")
        )
        self.probe_names = [
            ks_path.parent.name.split("_")[-1] for ks_path in kilosort_folder_paths
        ]

        self.kilosort_interfaces = [
            KiloSortSortingInterface(folder_path, keep_good_only, verbose)
            for folder_path in kilosort_folder_paths
        ]

        self.processed_recording_path = Path(processed_recording_path)
        # self.raw_recording_path = Path(raw_recording_path)

    def set_aligned_starting_time(self, aligned_starting_time: float):
        for kilosort_interface in self.kilosort_interfaces:
            kilosort_interface.set_aligned_starting_time(aligned_starting_time)

    def add_probe_information_to_nwb(self, nwbfile):
        raw_recording_path = Path(
            str(self.processed_recording_path).replace("processed", "raw"))
        meta_files = list(raw_recording_path.rglob("*/*ap.meta"))

        for meta_file, probe_name in zip(meta_files, self.probe_names):
            probe = pi.read_spikeglx(meta_file)  # Load probe object

            if probe.get_shank_count() == 1:  # Set shank ids
                probe.set_shank_ids(np.full((probe.get_contact_count(), ), 1))
            else:
                warnings.warn(
                    "More than one shank. You are probably using Neuropixels 2.0. This is not "
                    "yet implemented in bnd"
                )

            nwbfile.create_device(
                name=probe_name,
                description=probe.annotations["model_name"],  # Neuropixels 1.0
                manufacturer=probe.annotations["manufacturer"],
            )
            nwbfile.create_electrode_group(
                name=probe_name,
                description=f'{probe.annotations["model_name"]}. Location corresponds to the targeted brain region '
                            f'and position is the location of tip relative to bregma in stereotactic coordinates',
                location="??",  # TODO
                device=nwbfile.devices[probe_name],
                position=[0, 0, 0, ],  # TODO
            )

            for contact_position, contact_id in zip(probe.contact_positions, probe.contact_ids):
                x, y = contact_position
                z = 0.0
                # breakpoint()
                contact_id = int(contact_id.split('e')[1:][0])

                nwbfile.add_electrode(
                    group=nwbfile.electrode_groups[probe_name],
                    x=float(x),
                    y=float(y),
                    z=z,
                    id=contact_id,
                    location="??",  # TODO brain region
                    reference=f"Tip of the probe"  # TODO: Make this dynamic
                )

    def add_to_nwbfile(
        self,
        nwbfile: NWBFile,
        metadata: Optional[DeepDict] = None,
        stub_test: bool = False,
        # write_ecephys_metadata: bool = True,
        # write_as: Literal["units", "processing"] = "units",
        # units_name: str = "units",
        # units_description: str = "Autogenerated by neuroconv.",
    ):

        self.add_probe_information_to_nwb(nwbfile)

        # Kilosort output will be saved in processing and not units
        # units is reserved for the units curated by Phy
        for probe_name, kilosort_interface in zip(
            self.probe_names, self.kilosort_interfaces,
        ):


            kilosort_interface.add_to_nwbfile(
                nwbfile,
                metadata,
                stub_test,
                write_ecephys_metadata=True,
                write_as="processing",  # kilosort output is not the final curated version
                units_name=f"units_{probe_name}",
                units_description=f"Kilosorted units on {probe_name}",
            )



            # The following does add the probes to the NWB file but without any useful info,
            # so I'll use probeinterface for that
            # raw_recording_path = Path(str(self.processed_recording_path).replace("processed", "raw"))
            # recording = se.read_spikeglx(
            #    raw_recording_path,
            #    stream_name = f"{probe_name}.ap",
            #    load_sync_channel = True,
            # )
            #
            # from neuroconv.tools.spikeinterface import (
            #    add_devices,
            #    add_electrode_groups,
            #    add_electrodes,
            # )
            #
            # add_devices(nwbfile=nwbfile, metadata=metadata)
            # add_electrode_groups(recording=recording, nwbfile=nwbfile, metadata=metadata)
            # add_electrodes(recording=recording, nwbfile=nwbfile, metadata=metadata)

    def get_metadata(self) -> DeepDict:
        return DeepDict()
